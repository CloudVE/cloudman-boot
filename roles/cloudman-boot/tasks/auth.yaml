- name: Create namespace for keycloak
  command: /usr/local/bin/kubectl create namespace keycloak
  ignore_errors: True

- name: Check if keycloak operator is already unarchived
  stat:
    path: "{{ cm_keycloak_operator_path }}"
  register: kc_dir

- name: Download and operator
  when: not (kc_dir.stat.exists and kc_dir.stat.isdir)
  block:
    - name: Download and unarchive keycloak-operator release
      ansible.builtin.unarchive:
        src: https://codeload.github.com/{{ cm_keycloak_operator_fork }}/tar.gz/{{ cm_keycloak_operator_version }}
        dest: /tmp/
        remote_src: yes
      when: not (cm_keycloak_operator_version in ["latest", "master"])

    - name: Clone master from github
      ansible.builtin.git:
        repo: "https://github.com/{{ cm_keycloak_operator_fork }}"
        dest: "{{ cm_keycloak_operator_path }}"
      when: cm_keycloak_operator_version in ["latest", "master"]

    - name: Go to keycloak operator and prepare the cluster resources
      command: chdir={{ cm_keycloak_operator_path }} make cluster/prepare

    - name: Deploy the operator
      command: "/usr/local/bin/kubectl apply -f {{ cm_keycloak_operator_path }}/deploy/operator.yaml -n {{ cm_keycloak_namespace }}"

    - name: Pin keycloak version
      command: /usr/local/bin/kubectl patch deployment keycloak-operator -n keycloak -p '{"spec":{"template":{"spec":{"containers":[{"env":[{"name":"RELATED_IMAGE_KEYCLOAK","value":"{{ cm_keycloak_image }}"}],"name":"keycloak-operator"}]}}}}'
      ignore_errors: True

- name: Render Keycloak instance CRD
  template:
    src: keycloakcrd.yml.j2
    dest: "{{ cm_keycloak_operator_path }}/deploy/cloudman-keycloak.yaml"

- name: Apply the rendered Keycloak instance
  command: /usr/local/bin/kubectl apply -f {{ cm_keycloak_operator_path }}/deploy/cloudman-keycloak.yaml -n {{ cm_keycloak_namespace }}

- name: Render GVL Keycloak realm CRD
  template:
    src: keycloak_gvl_realm.yml.j2
    dest: "{{ cm_keycloak_operator_path }}/deploy/gvl-keycloakrealm.yaml"

- name: Apply the rendered GVL realm
  command: /usr/local/bin/kubectl apply -f {{ cm_keycloak_operator_path }}/deploy/gvl-keycloakrealm.yaml -n {{ cm_keycloak_namespace }}

- name: Render Keycloak ingress cert patch
  template:
    src: keycloak_ingress_patch.yml.j2
    dest: "{{ cm_keycloak_operator_path }}/deploy/cloudman-keycloak-ingress-patch.yaml"
  tags: auth

- name: Check if Rancher SAML Client Certificate is already created
  stat:
    path: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.crt"
  register: rancher_crt

- name: Generate certs, Rancher SAML Client CRD, and change default rancher local password
  when: not rancher_crt.stat.exists
  block:
    - name: Generate a key
      openssl_privatekey:
        path: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.pem"
        size: 2048

    - name: Generate CSR
      openssl_csr:
        path: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.csr"
        privatekey_path: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.pem"
        common_name: ansible-rancher

    - name: Generate a Self Signed OpenSSL certificate
      openssl_certificate:
        path: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.crt"
        privatekey_path: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.pem"
        csr_path: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.csr"
        provider: selfsigned

- name: Slurp Rancher Cert
  ansible.builtin.slurp:
    src: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.crt"
  register: rancher_cert
  tags: auth

- name: Slurp Rancher Key
  ansible.builtin.slurp:
    src: "{{ cm_keycloak_operator_path }}/deploy/ansible-rancher.pem"
  register: rancher_key
  tags: auth

- name: Render Rancher SAML Client CRD
  template:
    src: keycloak_rancher_client.yml.j2
    dest: "{{ cm_keycloak_operator_path }}/deploy/rancher-saml-keycloakclient.yaml"

- name: Patch in the rendered Keycloak ingress cert patch
  command: /usr/local/bin/kubectl patch ingress keycloak -n {{ cm_keycloak_namespace }} --patch-file {{ cm_keycloak_operator_path }}/deploy/cloudman-keycloak-ingress-patch.yaml
  tags: auth
  retries: 10
  delay: 10
  register: result
  until: result.rc == 0

- name: Apply the rendered Rancher SAML Client
  command: /usr/local/bin/kubectl apply -f {{ cm_keycloak_operator_path }}/deploy/rancher-saml-keycloakclient.yaml -n {{ cm_keycloak_namespace }}

- name: Login to Rancher
  uri:
    url: "https://{{ rancher_hostname }}/v3-public/localProviders/local?action=login"
    method: POST
    body_format: json
    body:
      username: admin
      password: "admin"
    validate_certs: "{{ cm_validate_certs }}"
    status_code: [201, 401]
    return_content: yes
  register: rancher_login
  retries: 80
  delay: 5
  until: rancher_login['status']|default(0) in [200, 201, 401]
  tags: auth

- name: Change default password and setup external auth first time only
  when: rancher_login['status']|default(0) in [200, 201]
  block:
    - name: Set Rancher admin Token and user id
      set_fact:
        ra_token: "{{ rancher_login.json.token }}"
        ra_admin_user_id: "{{ rancher_login.json.userId }}"
      tags: auth

    - name: Change password for admin user
      uri:
        url: https://{{ rancher_hostname }}/v3/users?action=changepassword
        method: POST
        validate_certs: "{{ cm_validate_certs }}"
        body_format: json
        body:
          currentPassword: "admin"
          newPassword: "{{ cluster_password }}"
        headers:
          Authorization: Bearer {{ ra_token }}
      tags: auth

    #https://rancher.com/docs/rancher/v2.x/en/admin-settings/authentication/keycloak/#keycloak-6-0-0-idpssodescriptor-missing-from-options
    - name: Get SAML Metadata IDPSSODescriptor
      uri:
        url: "https://{{ keycloak_hostname }}/auth/realms/{{ cm_keycloak_realm_name }}/protocol/saml/descriptor"
        method: GET
        validate_certs: "{{ cm_validate_certs }}"
        return_content: yes
      register: idp_metadata
      retries: 80
      delay: 5
      until: idp_metadata['status']|default(0) == 200
      tags: auth

    - name: Setup Rancher External Auth
      uri:
        url: "https://{{ rancher_hostname }}/v3/keyCloakConfigs/keycloak"
        method: PUT
        validate_certs: "{{ cm_validate_certs }}"
        body_format: json
        body:
          accessMode: "required"
          actions: { "disable": "https://{{ rancher_hostname }}/v3/keyCloakConfigs/keycloak?action=disable", "testAndEnable": "https://{{ rancher_hostname }}/v3/keyCloakConfigs/keycloak?action=testAndEnable" }
          allowedPrincipalIds: ["keycloak_user://admin"]
          baseType: "authConfig"
          displayNameField: "displayName"
          entityID: "rancher-cloudman"
          enabled: true
          groupsField: "memberOf"
          id: "keycloak"
          idpMetadataContent: '{{ idp_metadata.content | regex_replace("<md:EntitiesDescriptor ([^>]*)>\s*<md:EntityDescriptor", "<md:EntityDescriptor \1") | regex_replace("\n*</md:EntitiesDescriptor>", "") }}'
          links: { "self": "https://{{ rancher_hostname }}/v3/keyCloakConfigs/keycloak", "update": "https://{{ rancher_hostname }}/v3/keyCloakConfigs/keycloak" }
          name: "keycloak"
          rancherApiHost: "https://{{ rancher_hostname }}/"
          spCert: "{{ rancher_cert['content'] | b64decode }}"
          spKey: "{{ rancher_key['content'] | b64decode }}"
          type: "keyCloakConfig"
          uidField: "uid"
          userNameField: "cn"
        headers:
          Authorization: Bearer {{ ra_token }}
      retries: 5
      delay: 10
      tags: auth

    - name: Set default Rancher user role to admin
      uri:
        url: "https://{{ rancher_hostname }}/v3/globalRoles/admin"
        method: PUT
        validate_certs: "{{ cm_validate_certs }}"
        body_format: json
        body:
          newUserDefault: true
        headers:
          Authorization: Bearer {{ ra_token }}
      retries: 5
      delay: 10
      tags: auth

    - name: Get external cluster kubeconfig
      uri:
        url: https://{{ rancher_hostname }}/v3/clusters/local?action=generateKubeconfig
        method: POST
        validate_certs: "{{ cm_validate_certs }}"
        headers:
          Authorization: Bearer {{ ra_token }}
      register: kubeconfig_response
      retries: 10
      delay: 2
      until: kubeconfig_response['status']|default(0) == 200
      tags: auth

    - name: Set external Kubeconfig
      set_fact:
        ex_kubeconfig: "{{ kubeconfig_response.json.config }}"

    - name: Save external kubeconfig to file
      copy:
        content: "{{ ex_kubeconfig }}"
        dest: "/etc/rancher/rke2/external.yaml"
      delegate_to: localhost
